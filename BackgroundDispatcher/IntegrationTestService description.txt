
описание работы class IntegrationTestService

        #region Health Check operating procedure

        // порядок работы встроенного интеграционного теста (далее health check) -

        // _convert.CreateTestScenarioKey
        // создание сценария производится из выбранного (по номеру сценария) заранее заданного массива с действиями
        // каждый элемент массива означает книгу или пару с номером и версией (не конкретными, а по порядку) или время задержки
        // метод записывает этот массив сценария в ключ testScenarioSequenceKey = test-scenario-sequence,
        // снабжая его номерами шагов (номера полей) - в будущем это будет общение между серверами

        // List<int> uniqueBookIdsFromStorageKey = _prepare.CreateTestBookPlainTexts(constantsSet, stoppingToken, testPairsCount, delayAfter);
        // тут неправильно указание количества пар и задержка - теперь всё из сценария
        // и вообще, переделать на последовательное выполнение, а не цепочка вглубь - фиг, что поймёшь потом

        // TestTasksPreparationService CreateTestBookPlainTexts
        // берёт ключ хранилища тестовых книг, указанный явным образом (временно, потом что-то придумать)

        // производим инвентаризацию хранилища тестовых книг - составляем список полей (всех хранящихся книг) и список уникальных номеров книг (английских, русская книга из пары вычисляется)

        // вызывается _prepare.CreateTestBookPlainTexts и создается комплект тестовых книг
        // для этого обращаемся к стационарному хранилищу тестовых книг в ключе storageKeyBookPlainTexts
        // *** потом их надо уметь удобно обновлять и хранить копии в базе (в специальном разделе?)
        // вызывается _store.CreateTestBookIdsListFromStorageKey
        // общее назначение метода - создать два списка - номеров книг и мест хранения (название поля в хранилище)
        // для этого создаём два новых списка -
        // int uniqueBookIdsFromStorageKey - уникальные номера книг и string guidFieldsFromStorageKey - названия полей в хранилище
        // проверяем наличие ключа хранилища
        // выгружаем всё хранилище в словарь
        // перебираем пары <string, TextSentence>
        // название поля string сразу записываем в новый список
        // достаём номер книги из очередного TextSentence и проверяем его наличие в новом списке номеров
        // если такого номера ещё нет, добавляем его в список
        // возвращаем из метода два списка (очевидно несинхронные и разной длины)

        // вызывается RemoveTestBookIdFieldsFromEternalLog
        // используя список уникальных ключей, надо удалить все тестовые ключи из вечного лога
        // здесь для первичной очистки и для контроля (вдруг по дороге упадёт и ключи останутся)

        // вызывается _collect.CreateTaskPackageAndSaveLog
        // вне теста этот метод используется для для создания ключа готового пакета задач -
        // с последующей генерацией (другим методом) ключа кафе для оповещения о задачах бэк-сервера
        // сохраняются названия гуид-полей книг, созданные контроллером, но они перезаписываются в новый ключ, уникальный для собранного пакета
        // одновременно, при перезаписи содержимого книг, оно анализируется (вычисляется хэш текста) и проверяется на уникальность
        // если такая книга уже есть, это гуид-поле удаляется
        // здесь этот метод используется для записи хэшей в вечный лог -
        // при этом вычисляются номера версий загружаемых книг, что и нужно вызывающему методу

        // вызывается _scenario.CreateTestScenarioLists - этот метод из ключа описания сценария
        // создаёт последовательность (список string rawPlainTextFields) гуид-полей сырых текстов
        // и задержек между ними (List<int> delayList) - и это синхронные списки
        // используется значение из того, где оно не нулевое
        // 
        // и опять вызывается RemoveTestBookIdFieldsFromEternalLog - удалить все тестовые ключи из вечного лога второй раз -
        // после завершения использования для подготовки тестовых текстов
        // 
        // вызывается CreateScenarioTasksAndEvents
        // создать из полей временного хранилища тестовую задачу, загрузить её и создать ключ оповещения о приходе задачи

        // *** отчёт по тесту -
        // *** надо создавать в контрольных точках по мере прохождения теста
        // *** и сохранять в ключе тест_отчёт с полями номерам шагов
        // *** или названиями контрольных точек
        // *** (но номера тоже хотелось бы)

        #endregion