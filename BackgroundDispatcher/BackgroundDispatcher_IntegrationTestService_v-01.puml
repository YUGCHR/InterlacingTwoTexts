@startuml

state "сервер-диспетчер BackgroundDispatcher" as CurrentSite #pink {
    state "Start This Server" as ProgramCS #red

    state Monitor

    state RedisKeyEventsProvider #red

    state RedisICacheProviderAsync #orange{

        state KeyTest #orange{
            state Fetch_010 : Test Scenario Number
        }
        state KeyBookPlainTexts : ... bookSplit_Guid_test

        state KeyBookPlainTexts #orange{
            state Fetch_020 : BookPlainTexts
        }

        state testScenarioSequenceKey #orange{
            state Fetch_030 : test scenario \nsequence - \nsteps/values
            state Write_030 : test scenario \nsequence - \nsteps/values
        }

        state DelFieldAsync #orange{
            state ListOfFiledsToDelete
        }

    }

    state EventKeyTest #yellow

    RedisKeyEventsProvider --> EventKeyTest

    ProgramCS -[#blue,bold]-> Monitor

    state "OnKeysEventsSubscribeService" as SubscribeService #lightblue {

        Monitor -[#blue,bold]-> SubscribingPlan

        state _isTestInProgressAlready : boolean

        SubscribingPlan -[#blue,bold]-> SubscribeOnEventKeyTest

        state SubscribeOnEventKeyTest #lightgreen {

            state check_isTestInProgressAlready <<choice>>
            
            check_isTestInProgressAlready -[#red]-> Exit : true
            check_isTestInProgressAlready -[#green,bold]-> EventEventTestOccured : false

            state EventEventTestOccured #coral{
                state blockDual : Dual call block
            }
        }

        EventKeyTest -[#darkred,dashed]-> _isTestInProgressAlready : check
        blockDual -[#darkblue,dashed]-> _isTestInProgressAlready : true
        _isTestInProgressAlready -[#green,bold]-> check_isTestInProgressAlready : check
    }

    state "ConvertArrayToKeyWithIndexFields" as _convert #lightblue {
        'метод создаёт из последовательности команд в List<int> (пришедшим из веб-интерфейса)
        'ключ с полями-индексами порядка команд и нужной активностью в значениях
        state CreateTestScenarioKey #lightgreen {
            state Const_CreateTestScenarioKey : Prepare local constants
            Const_CreateTestScenarioKey -[#blue,dashed]-> Write_030 : in future from web
            state SwitchArraySelect
            state testScenarioSequenceStepsValues
            Fetch_030 -[#darkred,bold]-> testScenarioSequenceStepsValues

        }
        CreateTestScenarioKey --> Const_CreateTestScenarioKey

    }
    state "AuxiliaryUtilsService" as _aux #lightblue {
        state RemoveWorkKeyOnStart #lightgreen {

        }
    }

    state "TestTasksPreparationService" as _prepare #lightblue {
        state CreateTestBookPlainTexts #lightgreen {
            state Const_CreateTestBookPlainTexts : Prepare local constants
            state Lists_021 : uniqueBookIdsFromStorageKey \nguidFieldsFromStorageKey
            state taskPackageGuid : not used here
            state Lists_022 : rawPlainTextFields \ndelayList
            state uniqueBookIdsFromStorageKey
            CreateTestBookPlainTexts -down-> Const_CreateTestBookPlainTexts
            Const_CreateTestBookPlainTexts -> Lists_021
            Lists_021 --> CreateTestBookIdsListFromStorageKey : call
            CreateTestBookIdsListFromStorageKey --> Lists_021 : return
            Lists_021 --> taskPackageGuid
            'используя список уникальных ключей, надо удалить все тестовые ключи из вечного лога
            'здесь для первичной очистки и для контроля (вдруг по дороге упадёт и ключи останутся)
            'передаём список всех полей из временного хранилища, чтобы создать нужные записи в вечном логе
            taskPackageGuid --> CreateTaskPackageAndSaveLog : call
            CreateTaskPackageAndSaveLog --> taskPackageGuid : return
            taskPackageGuid --> Lists_022
            'выходной список для запуска выбранного тестового сценария - поля сырых плоских текстов и задержки
            Lists_022 --> CreateTestScenarioLists : call
            CreateTestScenarioLists --> Lists_022 : return
            Lists_022 -> uniqueBookIdsFromStorageKey


        }

        state RemoveTestBookId #lightgreen {
            state FieldList : BookIds from \nStorage Key
            note left of FieldList
                this is
                note test
            end note
            state AddLang1Ids : Add Russian BookIds
        }
        RemoveTestBookId : Remove test bookId \nfields from eternal log
        FieldList -> AddLang1Ids
        AddLang1Ids -[#black,dotted]-> ListOfFiledsToDelete

        ' создать из полей временного хранилища тестовую задачу, загрузить её и создать ключ оповещения о приходе задачи
        state CreateScenarioTasksAndEvents
        Lists_021 --> FieldList
        'RemoveTestBookId --> Lists_021
        Lists_022 --> FieldList
        'RemoveTestBookId --> Lists_022
        Lists_022 --> CreateScenarioTasksAndEvents
        CreateScenarioTasksAndEvents --> uniqueBookIdsFromStorageKey
    }
    state "TestRawBookTextsStorageService" as _store #lightblue {
        state CreateTestBookIdsListFromStorageKey #lightgreen {
        }
    }
    state "CollectTasksInPackageService" as _collect #lightblue {
        state CreateTaskPackageAndSaveLog #lightgreen {
        }
    }
    state "TestScenarioService" as _scenario #lightblue {
        state CreateTestScenarioLists #lightgreen {
        }
    }
    state "FormTaskPackageFromPlainText" as _front #lightblue {
        state HandlerCallingsDistributor #lightgreen {
            state isTestInProgress
        }
    }

    state "IntegrationTestService" as _test #lightblue {

        state _isTestInProgress : boolean

        state IntegrationTestStart #lightgreen {
            state Const_IntegrationTestStart : Prepare local constants
            IntegrationTestStart --> Const_IntegrationTestStart
            Const_IntegrationTestStart -[#darkblue,dashed]-> _isTestInProgress : true
            EventEventTestOccured --> IntegrationTestStart

            state testScenario{
                state List_011 : uniqueBookIdsFromStorageKey


                state readTestScenarioNum

                state tempCreateScenario
                Fetch_010 -[#darkred,bold]-> tempCreateScenario
                tempCreateScenario --> SwitchArraySelect
                List_011 -[#orange,bold]-> CreateTestBookPlainTexts
                uniqueBookIdsFromStorageKey -[#orange,bold]-> List_011

            }

            state testResult

            Const_IntegrationTestStart --> testScenario
            testScenario --> testResult
            testResult -[#red,dashed]-> _isTestInProgress : false
            _isTestInProgress -[#green,bold]-> isTestInProgress : check
        }

        Fetch_020 -[#green,bold]-> readTestScenarioNum

        Const_IntegrationTestStart -[#red,dashed]-> _isTestInProgressAlready : false

        IntegrationTestStart --> RemoveWorkKeyOnStart


        state IsTestResultAsserted #lightgreen {
            state foreachEvent #green{
                state keyEventDataList #coral{
                    state foreachText #green{
                        state plainTextsDataList #coral{

                        }

                    }

                }
            }
        }
    }
}
@enduml
